# Arquivo de configuração do Pipeline para o Curso de DEVSECOPS
# Arquivo criado por Marcos Vinicius Cassel
# Versão do Circle CI config file
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.1.0
  aws-cli: circleci/aws-cli@3.1.4
  snyk: snyk/snyk@1.4.0
  terraform: circleci/terraform@3.1
  checkov: bridgecrew/checkov@0.0.4

jobs:

  build:

    docker:
      - image: cimg/node:19.6.1

    steps:
      - checkout
      - run: sudo npm install -g @angular/cli
      - run: sudo npm install -g grunt-cli
      - run: npm install
      - run: ls -la
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  test:

    docker:
      - image: cimg/node:19.6.1-browsers

    steps:
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools
      - run: ls -la
      - run: sudo npm install -g @angular/cli
      - run: sudo npm install -g grunt-cli
      - run: npm run test

  # Executa o Software composition Analysis
  test_sca:

    # Variaveis para integrar com Defect Dojo
    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Snyk Scan"
      REPORT_FILE: "report.json"

    docker:
      - image: cimg/node:19.6.1

    steps:
      - attach_workspace:
          at: .

      - snyk/scan:

          # Falha o build caso alguma vulnerabilidade seja encontrada
          fail-on-issues: false

          # Falha se encontrar alguma falha nesta severidade
          severity-threshold: high

          # Tire uma imagem instantânea das dependências atuais da aplicação para monitoramento contínuo pelo Snyk, se o teste foi bem-sucedido.
          monitor-on-build: false

          # Define o nome desse projeto para o scan
          project: '${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}'

          # Nome da Nome da variável de ambiente usada para armazenar o token de auth no Snyk
          token-variable: SNYK_TOKEN

          # Argumentos adicionais da CLI (https://docs.snyk.io/snyk-cli/cli-reference)
          # additional-arguments: '--fail-fast --all-projects'
          additional-arguments: '--json-file-output=report.json'

      - run:
          name: Upload the Snyk results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=application/json" \
            -F 'auto_create_context=true' \
            -F "scan_type=$SCAN_TYPE" | jq > snyk-report.html


  # Configura Semgrep para analizar somente as modificações em stand-alone mode
  pr_test_sast:

    environment:
      SEMGREP_RULES: p/default
      # Define com a partir de qual Branch as modificações devem ser consideradas
      SEMGREP_BASELINE_REF: "origin/master"
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Semgrep JSON Report"
      REPORT_FILE: "semgrep-report.json"

    docker:
      - image: returntocorp/semgrep

    steps:
      - checkout

      - run:
          name: Instalando curl e jq
          command: apk update && apk add curl jq      

      - run:
          name: "Semgrep scan"
          command: semgrep ci --json -o semgrep-report.json || true

      - run:
          name: Upload the Semgrep results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=application/json" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE" | jq
  
  # Configura Semgrep para enviar o resultado do scan para semgrep.dev
  # Executa Análise estática de código
  test_sast:

    environment:
      SEMGREP_RULES: p/default
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Semgrep JSON Report"
      REPORT_FILE: "semgrep-report.json"

    docker:
      - image: returntocorp/semgrep

    steps:
      - checkout

      - run:
          name: Instalando curl e jq
          command: apk update && apk add curl jq

      - run:
          name: "Semgrep scan"
          # Roda o semgrep falhando o pipeline
          # command: semgrep ci --json -o semgrep-report.json

          # Roda o semgrep sem falhar o pipeline
          command: semgrep ci --json -o semgrep-report.json || true

      - run:
          name: Upload the Semgrep results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=application/json" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE" | jq

  # Executa o secrets scanning no repositório considerando apenas as modificações pela Branch atual
  pr_test_secrets_scanning:

    docker:
      - image: trufflesecurity/trufflehog:latest

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Trufflehog Scan"
      REPORT_FILE: "trufflehog-report.json"

    steps:
      - checkout

      # Dependência para enviar o relatório para o DefectDOJO
      - run:
          name: Instalando curl e jq
          command: apk update && apk add curl jq

      - run:
          name: "Scan for secrets"
          command: trufflehog git file://. --since-commit master --branch "$CIRCLE_BRANCH" -j | tee -a trufflehog-report.json | jq

      - run:
          name: Upload the TruffleHog (secrets scanning) results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=application/json" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE" | jq


  # Executa o secrets scanning no repositório completo
  test_secrets_scanning:

    docker:
      - image: trufflesecurity/trufflehog:latest

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Trufflehog Scan"
      REPORT_FILE: "trufflehog-report.json"

    steps:
      - checkout
      - run:
          name: Instalando curl e jq
          command: apk update && apk add curl jq

      - run:
          name: "Scan for secrets"
          command: trufflehog git file://. --fail --only-verified -j | tee -a trufflehog-report.json | jq

      - run:
          name: Upload the TruffleHog (secrets scanning) results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=application/json" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE" | jq


  # Publica a aplicação em um ambiente Staging para usar de target do OWASP ZAP
  deploy-stg:

    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

    environment:
        EBS_ENV_NAME: "juice-shop-ebs-stg"
        EBS_APP_NAME: "juice-shop-web-stg"
        S3_BUCKET_NAME: "juice-shop-s3-stg"
        EBS_APP_OPTIONS_FILE: "ebs-app-options.json"
    
    steps:

      - setup_remote_docker:
          version: 20.10.18

      - attach_workspace:
          at: .

      - aws-cli/setup:
          profile-name: default

      # Comandos para buildar a imagem docker e publicar no Docker HUB
      - run: docker build -t $DOCKERHUB_USERNAME/juice-shop-app:$CIRCLE_SHA1 -t $DOCKERHUB_USERNAME/juice-shop-app:latest ./ # Caminho de onde o Dockerfile é carregado
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: docker push $DOCKERHUB_USERNAME/juice-shop-app:$CIRCLE_SHA1
      - run: docker push $DOCKERHUB_USERNAME/juice-shop-app:latest

      # Comandos para fazer o autalizar o ambiente no Elastic Beanstalk toda vez que uma nova imagem é publicada no docker hub
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            aws configure set region us-east-1
            aws s3 cp ./terraform/$EBS_APP_OPTIONS_FILE s3://$S3_BUCKET_NAME
            aws elasticbeanstalk create-application-version --application-name $EBS_APP_NAME --version-label $CIRCLE_SHA1 --source-bundle S3Bucket=$S3_BUCKET_NAME,S3Key=$EBS_APP_OPTIONS_FILE
            aws elasticbeanstalk update-environment --environment-name $EBS_ENV_NAME --version-label $CIRCLE_SHA1
            aws elasticbeanstalk describe-environments --environment-name $EBS_ENV_NAME | jq -r '.Environments[].CNAME' >> ./.zap/env_stg.cname

      - persist_to_workspace:
          root: .
          paths:
            - ./*

  # Configura o DAST usando OWASP ZAP - Baseline scan
  pr_test_dast:

    docker:
      - image: owasp/zap2docker-stable

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "ZAP Scan"
      REPORT_FILE: "/zap/wrk/zap-baseline-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk

      - run:
          # command: zap-baseline.py -t "http://$(cat /zap/wrk/.zap/env_stg.cname)" -I -c .zap/rules.conf -x zap-baseline-scan-report
          command: zap-baseline.py -t "http://$(cat /zap/wrk/.zap/env_stg.cname)" -c /zap/wrk/.zap/zap-baseline.conf -I -x zap-baseline-scan-report -r baseline-report.html
          no_output_timeout: 1.5h

      - run:
          name: Upload the ZAP Baseline Scan results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=text/xml" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE"

      - store_artifacts:  
          path: /zap/wrk/baseline-report.html
          destination: baseline-report.html

  # Configura o Scan de API usando OWASP ZAP - API Scan
  pr_test_api_scan:

    docker:
      - image: owasp/zap2docker-stable

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "ZAP Scan"
      REPORT_FILE: "/zap/wrk/zap-api-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk

      - run:
          command: zap-api-scan.py -t /zap/wrk/openapi.yml -f openapi -z "-configfile /zap/wrk/.zap/options.prop" -c /zap/wrk/.zap/zap-api.conf -I -x /zap/wrk/zap-api-scan-report.xml -r api-scan-report.html
          no_output_timeout: 1.5h

      - run:
          name: Upload the ZAP Api Scan results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=text/xml" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE"

      - store_artifacts:  
          path: /zap/wrk/api-scan-report.html
          destination: api-scan-report.html

  # Publica a aplicação em um ambiente de producão
  deploy-prod:

    docker:
      - image: cimg/base:2022.09
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

    environment:
      EBS_ENV_NAME: "juice-shop-ebs-prod"
      EBS_APP_NAME: "juice-shop-web-prod"
      S3_BUCKET_NAME: "juice-shop-s3-prod"
      EBS_APP_OPTIONS_FILE: "ebs-app-options.json"

    steps:

      - setup_remote_docker:
          version: 20.10.18

      - attach_workspace:
          at: .

      - aws-cli/setup:
          profile-name: default

      # Comandos para buildar a imagem docker e publicar no Docker HUB
      - run: docker build -t $DOCKERHUB_USERNAME/juice-shop-app:$CIRCLE_SHA1 -t $DOCKERHUB_USERNAME/juice-shop-app:latest ./ # Caminho de onde o Dockerfile é carregado
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: docker push $DOCKERHUB_USERNAME/juice-shop-app:$CIRCLE_SHA1
      - run: docker push $DOCKERHUB_USERNAME/juice-shop-app:latest

      # Comandos para fazer o autalizar o ambiente no Elastic Beanstalk toda vez que uma nova imagem é publicada no docker hub
      - run:
          name: Deploy to Elastic Beanstalk
          command: |
            aws configure set region us-east-1
            aws s3 cp ./terraform/$EBS_APP_OPTIONS_FILE s3://$S3_BUCKET_NAME
            aws elasticbeanstalk create-application-version --application-name $EBS_APP_NAME --version-label $CIRCLE_SHA1 --source-bundle S3Bucket=$S3_BUCKET_NAME,S3Key=$EBS_APP_OPTIONS_FILE
            aws elasticbeanstalk update-environment --environment-name $EBS_ENV_NAME --version-label $CIRCLE_SHA1
            aws elasticbeanstalk describe-environments --environment-name $EBS_ENV_NAME | jq -r '.Environments[].CNAME' >> ./.zap/env_prod.cname

      - persist_to_workspace:
          root: .
          paths:
            - ./*

  # Configura o DAST usando OWASP ZAP - Full scan
  test_dast:

    docker:
      - image: owasp/zap2docker-stable

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "ZAP Scan"
      REPORT_FILE: "/zap/wrk/zap-baseline-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk

      - run:
          # command: zap-baseline.py -t "http://$(cat /zap/wrk/.zap/env_stg.cname)" -I -c .zap/rules.conf -x zap-baseline-scan-report
          command: zap-baseline.py -t "http://$(cat /zap/wrk/.zap/env_prod.cname)" -j -I -x zap-baseline-scan-report -r baseline-report.html
          no_output_timeout: 3h

      - run:
          name: Upload the ZAP Baseline Scan results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=text/xml" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE"

      - store_artifacts:  
          path: /zap/wrk/baseline-report.html
          destination: baseline-report.html

  # Configura o Scan de API usando OWASP ZAP - API Scan
  test_api_scan:

    docker:
      - image: owasp/zap2docker-stable

    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "ZAP Scan"
      REPORT_FILE: "/zap/wrk/zap-api-scan-report.xml"

    steps:
      - attach_workspace:
          at: /zap/wrk

      - run:
          command: zap-api-scan.py -t /zap/wrk/openapi.yml -f openapi -z "-configfile /zap/wrk/.zap/options.prop" -I -x /zap/wrk/zap-api-scan-report.xml -r api-scan-report.html
          no_output_timeout: 1.5h

      - run:
          name: Upload the ZAP Api Scan results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=text/xml" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE"

      - store_artifacts:  
          path: /zap/wrk/api-scan-report.html
          destination: api-scan-report.html


  # Deploy da infra
  infrastructure_deploy:
    
    executor: terraform/default
    
    steps:
        - checkout
        - terraform/init:
            path: ./terraform
        - terraform/validate:
            path: ./terraform
        - terraform/fmt:
            path: ./terraform
        - terraform/plan:
            path: ./terraform
        - terraform/apply:
            path: ./terraform

    working_directory: ~/src

  # Configura a análise do código de infraestrutura (terraform) usando checkov
  test_iac_scan:
    environment:
      APP_NAME: "juice-shop"
      DEFECT_DOJO_API_URL: "https://defectdojo.soulsec.net/api/v2/import-scan/"
      SCAN_TYPE: "Checkov Scan"
      REPORT_FILE: "checkov/results_json.json"

    docker:
      - image: python:3.9

    steps:
      - checkout
      - run:
          name: Install Checkov
          command: |
            pip install checkov
      - run:
          name: Scan Terraform with Checkov
          command: |
            checkov -d ./terraform --framework terraform --soft-fail -o cli -o json --output-file-path console,$REPORT_FILE

      - run:
          name: Upload Checkov results to DefectDojo
          command: |
            curl -X 'POST' $DEFECT_DOJO_API_URL \
            -H 'accept: application/json' \
            -H "Authorization: $DEFECTDOJO_API_TOKEN" \
            -H 'Content-Type: multipart/form-data' \
            -F 'active=true' \
            -F 'verified=false' \
            -F 'engagement_name=juice-shop-cicd-pipeline' \
            -F 'deduplication_on_engagement=true' \
            -F 'minimum_severity=Info' \
            -F "scan_date=$(date +%Y-%m-%d)" \
            -F "product_name=$APP_NAME" \
            -F "file=@$REPORT_FILE;type=text/xml" \
            -F 'auto_create_context=TRUE' \
            -F "scan_type=$SCAN_TYPE"


workflows:

  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore: terraform
      - test:
          requires:
            - build
      - test_sca:
          requires:
            - build
      - test_secrets_scanning:
          requires:
            - build
          filters:
            branches:
              only: master
      - pr_test_secrets_scanning:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - test_sast:
          requires:
            - build
          filters:
            branches:
              only: master
      - pr_test_sast:
          requires:
            - build
          filters:
            branches:
              ignore: master                    
      - deploy-stg:
          requires:
            - test
            - test_sca
            - pr_test_secrets_scanning
            - pr_test_sast
          filters:
            branches:
              ignore: master
      - pr_test_dast:
          requires:
            - deploy-stg
          filters:
            branches:
              ignore: master
      - pr_test_api_scan:
          requires:
            - deploy-stg
          filters:
            branches:
              ignore: master              
      - deploy-prod:
          requires:
            - test
            - test_sca
            - test_secrets_scanning
            - test_sast
          filters:
            branches:
              only: master
      - test_dast:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master
      - test_api_scan:
          requires:
            - deploy-prod
          filters:
            branches:
              only: master
      - test_iac_scan:
          filters:
            branches:
              only: terraform
      - infrastructure_deploy:
          requires:
            - test_iac_scan
          filters:
            branches:
              only: terraform                